// Code generated by Kitex v0.7.1. DO NOT EDIT.

package commentservice

import (
			"context"
				comment_rpc "douyin/internal/pkg/kitex_gen/comment_rpc"
				client "github.com/cloudwego/kitex/client"
				kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
 }

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment_rpc.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CommentAction":
			kitex.NewMethodInfo(commentActionHandler, newCommentServiceCommentActionArgs, newCommentServiceCommentActionResult, false),
		"CommentList":
			kitex.NewMethodInfo(commentListHandler, newCommentServiceCommentListArgs, newCommentServiceCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":	 "comment_rpc",
		"ServiceFilePath": "..\\..\\idl\\kitex-idl\\comment_rpc.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName: 	 serviceName,
		HandlerType: 	 handlerType,
		Methods:     	 methods,
		PayloadCodec:  	 kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}



func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*comment_rpc.CommentServiceCommentActionArgs)
	realResult := result.(*comment_rpc.CommentServiceCommentActionResult)
	success, err := handler.(comment_rpc.CommentService).CommentAction(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCommentServiceCommentActionArgs() interface{} {
	return comment_rpc.NewCommentServiceCommentActionArgs()
}

func newCommentServiceCommentActionResult() interface{} {
	return comment_rpc.NewCommentServiceCommentActionResult()
}


func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*comment_rpc.CommentServiceCommentListArgs)
	realResult := result.(*comment_rpc.CommentServiceCommentListResult)
	success, err := handler.(comment_rpc.CommentService).CommentList(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCommentServiceCommentListArgs() interface{} {
	return comment_rpc.NewCommentServiceCommentListArgs()
}

func newCommentServiceCommentListResult() interface{} {
	return comment_rpc.NewCommentServiceCommentListResult()
}


type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}


func (p *kClient) CommentAction(ctx context.Context , request *comment_rpc.CommentActionReq) (r *comment_rpc.CommentActionResp, err error) {
	var _args comment_rpc.CommentServiceCommentActionArgs
	_args.Request = request
	var _result comment_rpc.CommentServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context , request *comment_rpc.CommentListReq) (r *comment_rpc.CommentListResp, err error) {
	var _args comment_rpc.CommentServiceCommentListArgs
	_args.Request = request
	var _result comment_rpc.CommentServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

