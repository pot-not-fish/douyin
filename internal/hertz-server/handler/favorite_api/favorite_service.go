// Code generated by hertz generator.

package favorite_api

import (
	"context"

	favorite_api "douyin/internal/hertz-server/model/favorite_api"
	"douyin/internal/hertz-server/model/user_api"
	"douyin/internal/hertz-server/model/video_api"
	"douyin/internal/pkg/dal/user_dal"
	"douyin/internal/pkg/dal/video_dal"
	"douyin/internal/pkg/kitex_client"
	"douyin/internal/pkg/mw"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FavoriteAction .
// @router /douyin/favorite/action [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite_api.FavoriteActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite_api.FavoriteActionResp)

	row_user_id, ok := c.Get("user_id")
	if !ok {
		resp.StatusCode = 1
		resp.StatusMsg = "could not find user_id"
		c.JSON(consts.StatusOK, resp)
		return
	}
	user_id := row_user_id.(int64)

	video_user_id, err := video_dal.RetrieveUser(req.VideoID)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	var favorite = video_dal.Favorite{
		UserId:      user_id,
		VideoId:     req.VideoID,
		VideoUserId: video_user_id,
	}

	switch req.ActionType {
	case 1: // 点赞
		if err := favorite.CreateFavorite(); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		if err := user_dal.IncFavorite(user_id, video_user_id); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	case 2: // 取消点赞
		if err := favorite.DeleteFavorite(); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		if err := user_dal.DecFavorite(user_id, video_user_id); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	default:
		resp.StatusCode = 1
		resp.StatusMsg = "Invalid action type"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "OK"
	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite_api.FavoriteListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite_api.FavoriteListResp)

	videos, err := video_dal.RetrieveFavoriteVideo(req.UserID)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	var user_id_list = make([]int64, 0, len(*videos))
	for _, v := range *videos {
		user_id_list = append(user_id_list, v.UserId)
	}
	userinfo_list, err := kitex_client.UserinfoRpc(ctx, user_id_list)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	var isfollow_list = make([]bool, 0, len(*videos))
	var isfavorite_list = make([]bool, 0, len(*videos))
	if req.Token == nil || *req.Token == "" { // nil对应不存在token字段，""对应token值为空
		for i := 0; i < len(*videos); i++ {
			isfollow_list = append(isfollow_list, false)
			isfavorite_list = append(isfavorite_list, false)
		}
	} else {
		user_id, err := mw.TokenGetUserId(req.Token)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		var from_user_id_list []int64
		for i := 0; i < len(*videos); i++ {
			from_user_id_list = append(from_user_id_list, user_id)
		}

		var video_id_list []int64
		for _, v := range *videos {
			video_id_list = append(video_id_list, int64(v.ID))
		}

		isfollow_list, err = kitex_client.IsFollowRpc(ctx, from_user_id_list, user_id_list)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		isfavorite_list, err = kitex_client.IsFavoriteRpc(ctx, from_user_id_list, video_id_list)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	}

	for k, v := range *videos {
		resp.VideoList = append(resp.VideoList, &video_api.Video{
			ID: int64(v.ID),
			Author: &user_api.User{
				ID:              userinfo_list.User[k].UserId,
				Name:            userinfo_list.User[k].Name,
				FollowCount:     userinfo_list.User[k].FollowCount,
				FollowerCount:   userinfo_list.User[k].FollowerCount,
				IsFollow:        isfollow_list[k],
				Avatar:          userinfo_list.User[k].Avatar,
				BackgroundImage: userinfo_list.User[k].Background,
				Signature:       userinfo_list.User[k].Signature,
				TotalFavorited:  userinfo_list.User[k].TotalFavorited,
				WorkCount:       userinfo_list.User[k].WorkCount,
				FavoriteCount:   userinfo_list.User[k].FavoriteCount,
			},
			PlayURL:       "https://840231514-1320167793.cos.ap-nanjing.myqcloud.com" + v.PlayUrl,
			CoverURL:      "https://840231514-1320167793.cos.ap-nanjing.myqcloud.com" + v.CoverUrl,
			FavoriteCount: v.FavoriteCount,
			CommentCount:  v.CommentCount,
			IsFavorite:    isfavorite_list[k],
			Title:         v.Title,
		})
	}

	resp.StatusCode = 0
	resp.StatusMsg = "OK"
	c.JSON(consts.StatusOK, resp)
}
