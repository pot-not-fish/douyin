// Code generated by hertz generator.

package favorite_api

import (
	"context"

	favorite_api "douyin/internal/hertz-server/model/favorite_api"
	"douyin/internal/hertz-server/model/user_api"
	"douyin/internal/hertz-server/model/video_api"
	"douyin/internal/pkg/kitex_client"
	"douyin/internal/pkg/mw"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FavoriteAction .
// @router /douyin/favorite/action [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite_api.FavoriteActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite_api.FavoriteActionResp)

	rowUserID, ok := c.Get("user_id")
	if !ok {
		resp.StatusCode = 1
		resp.StatusMsg = "could not find user_id"
		c.JSON(consts.StatusOK, resp)
		return
	}
	userID := rowUserID.(int64)

	videoList, err := kitex_client.VideoInfoRpc(ctx, []int64{req.VideoID})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	switch req.ActionType {
	case 1: // 点赞
		if err := kitex_client.FavoriteActionRpc(ctx, 1, userID, req.VideoID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		if err := kitex_client.UserInfoActionRpc(ctx, 1, userID, &videoList.Videos[0].UserId); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		if err := kitex_client.VideoInfoActionRpc(ctx, 3, req.VideoID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	case 2: // 取消点赞
		if err := kitex_client.FavoriteActionRpc(ctx, 2, userID, req.VideoID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		if err := kitex_client.UserInfoActionRpc(ctx, 2, userID, &videoList.Videos[0].UserId); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		if err := kitex_client.VideoInfoActionRpc(ctx, 4, req.VideoID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	default:
		resp.StatusCode = 1
		resp.StatusMsg = "Invalid action type"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "OK"
	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite_api.FavoriteListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite_api.FavoriteListResp)

	var userID int64
	if req.Token == nil || *req.Token == "" { // nil对应不存在token字段，""对应token值为空
		userID = 0
	} else {
		userID, err = mw.TokenGetUserId(req.Token)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	}

	favoriteVideoList, err := kitex_client.FavoriteVideoRpc(ctx, userID, req.UserID)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	videoListRpc, err := kitex_client.VideoInfoRpc(ctx, favoriteVideoList.VideoId)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	ownerIDList := make([]int64, 0, len(videoListRpc.Videos))
	for _, v := range videoListRpc.Videos {
		ownerIDList = append(ownerIDList, v.UserId)
	}
	userListRpc, err := kitex_client.UserListRpc(ctx, ownerIDList)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	isFollowRpc, err := kitex_client.IsFollowRpc(ctx, userID, ownerIDList)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	isFavoriteRpc, err := kitex_client.IsFavoriteRpc(ctx, userID, favoriteVideoList.VideoId)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	for i := 0; i < len(videoListRpc.Videos); i++ {
		resp.VideoList = append(resp.VideoList, &video_api.Video{
			ID: videoListRpc.Videos[i].Id,
			Author: &user_api.User{
				ID:              userListRpc.Users[i].Id,
				Name:            userListRpc.Users[i].Name,
				FollowCount:     userListRpc.Users[i].FollowCount,
				FollowerCount:   userListRpc.Users[i].FollowerCount,
				IsFollow:        isFollowRpc.IsFollow[i],
				Avatar:          userListRpc.Users[i].Avatar,
				BackgroundImage: userListRpc.Users[i].Background,
				Signature:       userListRpc.Users[i].Signature,
				TotalFavorited:  userListRpc.Users[i].TotalFavorited,
				WorkCount:       userListRpc.Users[i].WorkCount,
				FavoriteCount:   userListRpc.Users[i].FavoriteCount,
			},
			PlayURL:       "https://840231514-1320167793.cos.ap-nanjing.myqcloud.com" + videoListRpc.Videos[i].PlayUrl,
			CoverURL:      "https://840231514-1320167793.cos.ap-nanjing.myqcloud.com" + videoListRpc.Videos[i].CoverUrl,
			FavoriteCount: videoListRpc.Videos[i].FavoriteCount,
			CommentCount:  videoListRpc.Videos[i].CommentCount,
			IsFavorite:    isFavoriteRpc.IsFavorite[i],
			Title:         videoListRpc.Videos[i].Title,
		})
	}

	resp.StatusCode = 0
	resp.StatusMsg = "OK"
	c.JSON(consts.StatusOK, resp)
}
