/*
 * @Author: LIKE_A_STAR
 * @Date: 2023-11-10 17:28:27
 * @LastEditors: LIKE_A_STAR
 * @LastEditTime: 2024-01-21 21:20:33
 * @Description:
 * @FilePath: \vscode programd:\vscode\goWorker\src\douyin\internal\hertz-server\handler\user_api\user_service.go
 */
// Code generated by hertz generator.

package user_api

import (
	"context"

	user_api "douyin/internal/hertz-server/model/user_api"
	"douyin/internal/pkg/dal/user_dal"
	"douyin/internal/pkg/kitex_client"
	"douyin/internal/pkg/mw"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /douyin/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_api.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 创建用户数据库信息
	var user = user_dal.User{
		Name:     req.Username,
		Password: req.Password,
	}
	if err = user.CreateUser(); err != nil {
		resp := new(user_api.RegisterResp)
		resp.StatusMsg = err.Error()
		resp.StatusCode = 1
		c.JSON(consts.StatusOK, resp)
	}

	// 生成token
	token, _, err := mw.JwtMiddleware.TokenGenerator(&mw.Payload{ // 这里一定要取地址，因为断言是取payload地址比较的
		Name:    user.Name,
		User_id: int64(user.ID),
	})
	if err != nil {
		resp := new(user_api.RegisterResp)
		resp.StatusMsg = err.Error()
		resp.StatusCode = 1
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, &user_api.RegisterResp{
		StatusCode: 0,
		StatusMsg:  "OK",
		Token:      token,
		UserID:     int64(user.ID),
	})
}

// Userinfo .
// @router /douyin/user [GET]
func Userinfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_api.UserinfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user_api.UserinfoResp)

	// 将id发送给kitex userinfo的rpc服务，获取用户信息
	userinfo, err := kitex_client.UserinfoRpc(ctx, []int64{req.UserID})
	if err != nil {
		resp.StatusMsg = err.Error()
		resp.StatusCode = 1
		c.JSON(consts.StatusOK, resp)
		return
	}

	var isfollow bool
	if req.Token == nil || *req.Token == "" { // nil对应不存在token字段，""对应token值为空
		isfollow = false
	} else {
		user_id, err := mw.TokenGetUserId(req.Token)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		var isfollow_list = make([]bool, 0, 1)
		isfollow_list, err = kitex_client.IsFollowRpc(ctx, []int64{user_id}, []int64{req.UserID})
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		isfollow = isfollow_list[0]
	}

	resp.StatusCode = 0
	resp.StatusMsg = "Welcome"
	resp.User = &user_api.User{
		ID:              userinfo.User[0].UserId,
		Name:            userinfo.User[0].Name,
		FollowCount:     userinfo.User[0].FollowCount,
		FollowerCount:   userinfo.User[0].FollowerCount,
		IsFollow:        isfollow,
		Avatar:          userinfo.User[0].Avatar,
		BackgroundImage: userinfo.User[0].Background,
		Signature:       userinfo.User[0].Signature,
		TotalFavorited:  userinfo.User[0].TotalFavorited,
		WorkCount:       userinfo.User[0].WorkCount,
		FavoriteCount:   userinfo.User[0].FavoriteCount,
	}

	c.JSON(consts.StatusOK, resp)
}
