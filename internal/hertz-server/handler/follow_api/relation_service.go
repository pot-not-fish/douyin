// Code generated by hertz generator.

package follow_api

import (
	"context"

	follow_api "douyin/internal/hertz-server/model/follow_api"
	"douyin/internal/hertz-server/model/user_api"
	"douyin/internal/pkg/kitex_client"
	"douyin/internal/pkg/mw"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow_api.RelationActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow_api.RelationActionResp)

	// 获取用户id
	rowUserID, ok := c.Get("user_id")
	if !ok {
		resp.StatusCode = 1
		resp.StatusMsg = "missing user_id"
		c.JSON(consts.StatusOK, resp)
		return
	}
	userID := rowUserID.(int64)

	switch req.ActionType {
	case 1:
		// 创建关注字段
		if err = kitex_client.RelationActionRpc(ctx, kitex_client.IncFavorite, userID, req.ToUserID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		// 用户信息自增
		if err = kitex_client.UserInfoActionRpc(ctx, kitex_client.IncUserFollow, userID, &req.ToUserID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	case 2:
		// 删除用户关注
		if err = kitex_client.RelationActionRpc(ctx, kitex_client.DecFollow, userID, req.ToUserID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		// 用户信息自减
		if err = kitex_client.UserInfoActionRpc(ctx, kitex_client.DecUserFollow, userID, &req.ToUserID); err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
	default:
		resp.StatusCode = 1
		resp.StatusMsg = "Invalid action type"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "OK"
	c.JSON(consts.StatusOK, resp)
}

// RelationFollow .
// @router /douyin/relatioin/follow/list [GET]
func RelationFollow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow_api.FollowListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow_api.FollowListResp)

	// 获取关注列表的用户id
	relationRpc, err := kitex_client.RelationListRpc(ctx, kitex_client.FollowList, req.UserID)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	align := len(relationRpc.UserId)

	// 获取用户id对应的用户信息
	userRpc, err := kitex_client.UserListRpc(ctx, relationRpc.UserId)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	if align != len(userRpc.Users) {
		resp.StatusCode = 1
		resp.StatusMsg = "invalid align user list"
		c.JSON(consts.StatusOK, resp)
		return
	}

	var isFollow []bool
	if req.Token == nil || *req.Token == "" { // nil对应不存在token字段，""对应token值为空
		isFollow = make([]bool, 0, align)
		for i := 0; i < align; i++ {
			isFollow = append(isFollow, false)
		}
	} else {
		userID, err := mw.TokenGetUserId(req.Token)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		// 获取是否关注
		isFollowRpc, err := kitex_client.IsFollowRpc(ctx, userID, relationRpc.UserId)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
		if align != len(isFollowRpc.IsFollow) {
			resp.StatusCode = 1
			resp.StatusMsg = "invalid align is follow"
			c.JSON(consts.StatusOK, resp)
			return
		}
		isFollow = isFollowRpc.IsFollow
	}

	for i := 0; i < align; i++ {
		resp.UserList = append(resp.UserList, &user_api.User{
			ID:              userRpc.Users[i].Id,
			Name:            userRpc.Users[i].Name,
			FollowCount:     userRpc.Users[i].FollowCount,
			FollowerCount:   userRpc.Users[i].FollowerCount,
			IsFollow:        isFollow[i],
			Avatar:          userRpc.Users[i].Avatar,
			BackgroundImage: userRpc.Users[i].Background,
			Signature:       userRpc.Users[i].Signature,
			TotalFavorited:  userRpc.Users[i].TotalFavorited,
			WorkCount:       userRpc.Users[i].WorkCount,
			FavoriteCount:   userRpc.Users[i].FavoriteCount,
		})
	}

	resp.StatusCode = 0
	resp.StatusMsg = "OK"
	c.JSON(consts.StatusOK, resp)
}

// RelationFollower .
// @router /douyin/relation/follower/list [GET]
func RelationFollower(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow_api.FollowerListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow_api.FollowerListResp)

	// 获取粉丝列表用户id
	relationRpc, err := kitex_client.RelationListRpc(ctx, kitex_client.FollowerList, req.UserID)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	align := len(relationRpc.UserId)

	// 通过id获取粉丝列表用户信息
	userRpc, err := kitex_client.UserListRpc(ctx, relationRpc.UserId)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}
	if align != len(userRpc.Users) {
		resp.StatusCode = 1
		resp.StatusMsg = "invalid align user list"
		c.JSON(consts.StatusOK, resp)
		return
	}

	var isFollow []bool
	if req.Token == nil || *req.Token == "" { // nil对应不存在token字段，""对应token值为空
		isFollow = make([]bool, 0, align)
		for i := 0; i < align; i++ {
			isFollow = append(isFollow, false)
		}
	} else {
		userID, err := mw.TokenGetUserId(req.Token)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		// 查看是否关注
		isFollowRpc, err := kitex_client.IsFollowRpc(ctx, userID, relationRpc.UserId)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
		if align != len(isFollowRpc.IsFollow) {
			resp.StatusCode = 1
			resp.StatusMsg = "invalid align is follow"
			c.JSON(consts.StatusOK, resp)
			return
		}
		isFollow = isFollowRpc.IsFollow
	}

	for i := 0; i < align; i++ {
		resp.UserList = append(resp.UserList, &user_api.User{
			ID:              userRpc.Users[i].Id,
			Name:            userRpc.Users[i].Name,
			FollowCount:     userRpc.Users[i].FollowCount,
			FollowerCount:   userRpc.Users[i].FollowerCount,
			IsFollow:        isFollow[i],
			Avatar:          userRpc.Users[i].Avatar,
			BackgroundImage: userRpc.Users[i].Background,
			Signature:       userRpc.Users[i].Signature,
			TotalFavorited:  userRpc.Users[i].TotalFavorited,
			WorkCount:       userRpc.Users[i].WorkCount,
			FavoriteCount:   userRpc.Users[i].FavoriteCount,
		})
	}

	resp.StatusCode = 0
	resp.StatusMsg = "OK"
	c.JSON(consts.StatusOK, resp)
}
