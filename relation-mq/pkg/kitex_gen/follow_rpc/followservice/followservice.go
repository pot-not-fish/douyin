// Code generated by Kitex v0.7.1. DO NOT EDIT.

package followservice

import (
			"context"
				follow_rpc "douyin/relation-mq/pkg/kitex_gen/follow_rpc"
				client "github.com/cloudwego/kitex/client"
				kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return followServiceServiceInfo
 }

var followServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FollowService"
	handlerType := (*follow_rpc.FollowService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":
			kitex.NewMethodInfo(relationActionHandler, newFollowServiceRelationActionArgs, newFollowServiceRelationActionResult, false),
		"IsFollow":
			kitex.NewMethodInfo(isFollowHandler, newFollowServiceIsFollowArgs, newFollowServiceIsFollowResult, false),
		"RelationList":
			kitex.NewMethodInfo(relationListHandler, newFollowServiceRelationListArgs, newFollowServiceRelationListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":	 "follow_rpc",
		"ServiceFilePath": "..\\..\\idl\\kitex-idl\\relation_rpc.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName: 	 serviceName,
		HandlerType: 	 handlerType,
		Methods:     	 methods,
		PayloadCodec:  	 kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}



func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*follow_rpc.FollowServiceRelationActionArgs)
	realResult := result.(*follow_rpc.FollowServiceRelationActionResult)
	success, err := handler.(follow_rpc.FollowService).RelationAction(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newFollowServiceRelationActionArgs() interface{} {
	return follow_rpc.NewFollowServiceRelationActionArgs()
}

func newFollowServiceRelationActionResult() interface{} {
	return follow_rpc.NewFollowServiceRelationActionResult()
}


func isFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*follow_rpc.FollowServiceIsFollowArgs)
	realResult := result.(*follow_rpc.FollowServiceIsFollowResult)
	success, err := handler.(follow_rpc.FollowService).IsFollow(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newFollowServiceIsFollowArgs() interface{} {
	return follow_rpc.NewFollowServiceIsFollowArgs()
}

func newFollowServiceIsFollowResult() interface{} {
	return follow_rpc.NewFollowServiceIsFollowResult()
}


func relationListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*follow_rpc.FollowServiceRelationListArgs)
	realResult := result.(*follow_rpc.FollowServiceRelationListResult)
	success, err := handler.(follow_rpc.FollowService).RelationList(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newFollowServiceRelationListArgs() interface{} {
	return follow_rpc.NewFollowServiceRelationListArgs()
}

func newFollowServiceRelationListResult() interface{} {
	return follow_rpc.NewFollowServiceRelationListResult()
}


type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}


func (p *kClient) RelationAction(ctx context.Context , request *follow_rpc.RelationActionReq) (r *follow_rpc.RelationActionResp, err error) {
	var _args follow_rpc.FollowServiceRelationActionArgs
	_args.Request = request
	var _result follow_rpc.FollowServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollow(ctx context.Context , request *follow_rpc.IsFollowReq) (r *follow_rpc.IsFollowResp, err error) {
	var _args follow_rpc.FollowServiceIsFollowArgs
	_args.Request = request
	var _result follow_rpc.FollowServiceIsFollowResult
	if err = p.c.Call(ctx, "IsFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationList(ctx context.Context , request *follow_rpc.RelationListReq) (r *follow_rpc.RelationListResp, err error) {
	var _args follow_rpc.FollowServiceRelationListArgs
	_args.Request = request
	var _result follow_rpc.FollowServiceRelationListResult
	if err = p.c.Call(ctx, "RelationList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

