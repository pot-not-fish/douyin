/*
 * @Author: LIKE_A_STAR
 * @Date: 2023-11-10 17:28:27
 * @LastEditors: LIKE_A_STAR
 * @LastEditTime: 2024-02-28 11:44:10
 * @Description:
 * @FilePath: \vscode programd:\vscode\goWorker\src\douyin\hertz-server\handler\user_api\user_service.go
 */
// Code generated by hertz generator.

package user_api

import (
	"context"

	user_api "douyin/hertz-server/model/user_api"
	"douyin/hertz-server/pkg/kitex_client"
	"douyin/hertz-server/pkg/mw"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /douyin/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_api.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user_api.RegisterResp)

	// 数据库创建用户信息相应字段
	user, err := kitex_client.UserActionRpc(ctx, kitex_client.RegisterUser, req.Username, req.Password)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	// 生成token
	token, _, err := mw.JwtMiddleware.TokenGenerator(&mw.Payload{ // 这里一定要取地址，因为断言是取payload地址比较的
		Name:    user.User.Name,
		User_id: int64(user.User.Id),
	})
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, &user_api.RegisterResp{
		StatusCode: 0,
		StatusMsg:  "OK",
		Token:      token,
		UserID:     int64(user.User.Id),
	})
}

// Userinfo .
// @router /douyin/user [GET]
func Userinfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_api.UserinfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user_api.UserinfoResp)

	// 将id发送给kitex userinfo的rpc服务，获取用户信息
	userInfo, err := kitex_client.UserListRpc(ctx, []int64{req.UserID})
	if err != nil {
		resp.StatusMsg = err.Error()
		resp.StatusCode = 1
		c.JSON(consts.StatusOK, resp)
		return
	}

	isFollow := false
	if req.Token != nil && *req.Token != "" { // 用户登录的情况要判断其是否关注
		user_id, err := mw.TokenGetUserId(req.Token)
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}

		isFollowList, err := kitex_client.IsFollowRpc(ctx, user_id, []int64{req.UserID})
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = err.Error()
			c.JSON(consts.StatusOK, resp)
			return
		}
		isFollow = isFollowList.IsFollow[0]
	}

	resp.StatusCode = 0
	resp.StatusMsg = "Welcome"
	resp.User = &user_api.User{
		ID:              userInfo.Users[0].Id,
		Name:            userInfo.Users[0].Name,
		FollowCount:     userInfo.Users[0].FollowCount,
		FollowerCount:   userInfo.Users[0].FollowerCount,
		IsFollow:        isFollow,
		Avatar:          userInfo.Users[0].Avatar,
		BackgroundImage: userInfo.Users[0].Background,
		Signature:       userInfo.Users[0].Signature,
		TotalFavorited:  userInfo.Users[0].TotalFavorited,
		WorkCount:       userInfo.Users[0].WorkCount,
		FavoriteCount:   userInfo.Users[0].FavoriteCount,
	}

	c.JSON(consts.StatusOK, resp)
}
