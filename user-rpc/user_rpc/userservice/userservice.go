// Code generated by Kitex v0.7.1. DO NOT EDIT.

package userservice

import (
			"context"
				user_rpc "douyin/user-rpc/user_rpc"
				client "github.com/cloudwego/kitex/client"
				kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
 }

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user_rpc.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserList":
			kitex.NewMethodInfo(userListHandler, newUserServiceUserListArgs, newUserServiceUserListResult, false),
		"UserAction":
			kitex.NewMethodInfo(userActionHandler, newUserServiceUserActionArgs, newUserServiceUserActionResult, false),
		"UserInfoAction":
			kitex.NewMethodInfo(userInfoActionHandler, newUserServiceUserInfoActionArgs, newUserServiceUserInfoActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":	 "user_rpc",
		"ServiceFilePath": "..\\idl\\kitex-idl\\user_rpc.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName: 	 serviceName,
		HandlerType: 	 handlerType,
		Methods:     	 methods,
		PayloadCodec:  	 kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}



func userListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*user_rpc.UserServiceUserListArgs)
	realResult := result.(*user_rpc.UserServiceUserListResult)
	success, err := handler.(user_rpc.UserService).UserList(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newUserServiceUserListArgs() interface{} {
	return user_rpc.NewUserServiceUserListArgs()
}

func newUserServiceUserListResult() interface{} {
	return user_rpc.NewUserServiceUserListResult()
}


func userActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*user_rpc.UserServiceUserActionArgs)
	realResult := result.(*user_rpc.UserServiceUserActionResult)
	success, err := handler.(user_rpc.UserService).UserAction(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newUserServiceUserActionArgs() interface{} {
	return user_rpc.NewUserServiceUserActionArgs()
}

func newUserServiceUserActionResult() interface{} {
	return user_rpc.NewUserServiceUserActionResult()
}


func userInfoActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*user_rpc.UserServiceUserInfoActionArgs)
	realResult := result.(*user_rpc.UserServiceUserInfoActionResult)
	success, err := handler.(user_rpc.UserService).UserInfoAction(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newUserServiceUserInfoActionArgs() interface{} {
	return user_rpc.NewUserServiceUserInfoActionArgs()
}

func newUserServiceUserInfoActionResult() interface{} {
	return user_rpc.NewUserServiceUserInfoActionResult()
}


type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}


func (p *kClient) UserList(ctx context.Context , request *user_rpc.UserListReq) (r *user_rpc.UserListResp, err error) {
	var _args user_rpc.UserServiceUserListArgs
	_args.Request = request
	var _result user_rpc.UserServiceUserListResult
	if err = p.c.Call(ctx, "UserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserAction(ctx context.Context , request *user_rpc.UserActionReq) (r *user_rpc.UserActionResp, err error) {
	var _args user_rpc.UserServiceUserActionArgs
	_args.Request = request
	var _result user_rpc.UserServiceUserActionResult
	if err = p.c.Call(ctx, "UserAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserInfoAction(ctx context.Context , request *user_rpc.UserInfoActionReq) (r *user_rpc.UserInfoActionResp, err error) {
	var _args user_rpc.UserServiceUserInfoActionArgs
	_args.Request = request
	var _result user_rpc.UserServiceUserInfoActionResult
	if err = p.c.Call(ctx, "UserInfoAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

