// Code generated by Kitex v0.7.1. DO NOT EDIT.

package videoservice

import (
	"context"
	video_rpc "douyin/video-rpc/video_rpc"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	VideoFeed(ctx context.Context, request *video_rpc.VideoFeedReq, callOptions ...callopt.Option) (r *video_rpc.VideoFeedResp, err error)
	VideoList(ctx context.Context, request *video_rpc.VideoListReq, callOptions ...callopt.Option) (r *video_rpc.VideoListResp, err error)
	VideoInfo(ctx context.Context, request *video_rpc.VideoInfoReq, callOptions ...callopt.Option) (r *video_rpc.VideoListResp, err error)
	VideoAction(ctx context.Context, request *video_rpc.VideoActionReq, callOptions ...callopt.Option) (r *video_rpc.VideoActionResp, err error)
	VideoInfoAction(ctx context.Context, request *video_rpc.VideoInfoActionReq, callOptions ...callopt.Option) (r *video_rpc.VideoInfoActionResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) VideoFeed(ctx context.Context, request *video_rpc.VideoFeedReq, callOptions ...callopt.Option) (r *video_rpc.VideoFeedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoFeed(ctx, request)
}

func (p *kVideoServiceClient) VideoList(ctx context.Context, request *video_rpc.VideoListReq, callOptions ...callopt.Option) (r *video_rpc.VideoListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoList(ctx, request)
}

func (p *kVideoServiceClient) VideoInfo(ctx context.Context, request *video_rpc.VideoInfoReq, callOptions ...callopt.Option) (r *video_rpc.VideoListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoInfo(ctx, request)
}

func (p *kVideoServiceClient) VideoAction(ctx context.Context, request *video_rpc.VideoActionReq, callOptions ...callopt.Option) (r *video_rpc.VideoActionResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoAction(ctx, request)
}

func (p *kVideoServiceClient) VideoInfoAction(ctx context.Context, request *video_rpc.VideoInfoActionReq, callOptions ...callopt.Option) (r *video_rpc.VideoInfoActionResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoInfoAction(ctx, request)
}
